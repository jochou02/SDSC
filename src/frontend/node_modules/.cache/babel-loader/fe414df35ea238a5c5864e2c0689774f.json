{"ast":null,"code":"import addMinutes from \"../addMinutes/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport startOfMinute from \"../startOfMinute/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\r\n * @name eachMinuteOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of minutes within the specified time interval.\r\n *\r\n * @description\r\n * Returns the array of minutes within the specified time interval.\r\n *\r\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\r\n * @param {Object} [options] - an object with options.\r\n * @param {Number} [options.step=1] - the step to increment by. The step must be equal to or greater than 1\r\n * @throws {TypeError} 1 argument required\r\n * @returns {Date[]} the array with starts of minutes from the minute of the interval start to the minute of the interval end\r\n * @throws {RangeError} `options.step` must be a number equal to or greater than 1\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\r\n * const result = eachMinuteOfInterval({\r\n *   start: new Date(2014, 9, 14, 13),\r\n *   end: new Date(2014, 9, 14, 13, 3)\r\n * })\r\n * //=> [\r\n * //   Wed Oct 14 2014 13:00:00,\r\n * //   Wed Oct 14 2014 13:01:00,\r\n * //   Wed Oct 14 2014 13:02:00,\r\n * //   Wed Oct 14 2014 13:03:00\r\n * // ]\r\n */\n\nexport default function eachMinuteOfInterval(interval, options) {\n  var _options$step;\n\n  requiredArgs(1, arguments);\n  var startDate = startOfMinute(toDate(interval.start));\n  var endDate = toDate(interval.end);\n  var startTime = startDate.getTime();\n  var endTime = endDate.getTime();\n\n  if (startTime >= endTime) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  var step = Number((_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1);\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number equal to or greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addMinutes(currentDate, step);\n  }\n\n  return dates;\n}","map":{"version":3,"names":["addMinutes","toDate","startOfMinute","requiredArgs","eachMinuteOfInterval","interval","options","_options$step","arguments","startDate","start","endDate","end","startTime","getTime","endTime","RangeError","dates","currentDate","step","Number","isNaN","push"],"sources":["C:/Users/Jiting Shen/Documents/GitHub/UC-Socially-Undead/src/frontend/node_modules/date-fns/esm/eachMinuteOfInterval/index.js"],"sourcesContent":["import addMinutes from \"../addMinutes/index.js\";\r\nimport toDate from \"../toDate/index.js\";\r\nimport startOfMinute from \"../startOfMinute/index.js\";\r\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\r\n\r\n/**\r\n * @name eachMinuteOfInterval\r\n * @category Interval Helpers\r\n * @summary Return the array of minutes within the specified time interval.\r\n *\r\n * @description\r\n * Returns the array of minutes within the specified time interval.\r\n *\r\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\r\n * @param {Object} [options] - an object with options.\r\n * @param {Number} [options.step=1] - the step to increment by. The step must be equal to or greater than 1\r\n * @throws {TypeError} 1 argument required\r\n * @returns {Date[]} the array with starts of minutes from the minute of the interval start to the minute of the interval end\r\n * @throws {RangeError} `options.step` must be a number equal to or greater than 1\r\n * @throws {RangeError} The start of an interval cannot be after its end\r\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\r\n *\r\n * @example\r\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\r\n * const result = eachMinuteOfInterval({\r\n *   start: new Date(2014, 9, 14, 13),\r\n *   end: new Date(2014, 9, 14, 13, 3)\r\n * })\r\n * //=> [\r\n * //   Wed Oct 14 2014 13:00:00,\r\n * //   Wed Oct 14 2014 13:01:00,\r\n * //   Wed Oct 14 2014 13:02:00,\r\n * //   Wed Oct 14 2014 13:03:00\r\n * // ]\r\n */\r\nexport default function eachMinuteOfInterval(interval, options) {\r\n  var _options$step;\r\n\r\n  requiredArgs(1, arguments);\r\n  var startDate = startOfMinute(toDate(interval.start));\r\n  var endDate = toDate(interval.end);\r\n  var startTime = startDate.getTime();\r\n  var endTime = endDate.getTime();\r\n\r\n  if (startTime >= endTime) {\r\n    throw new RangeError('Invalid interval');\r\n  }\r\n\r\n  var dates = [];\r\n  var currentDate = startDate;\r\n  var step = Number((_options$step = options === null || options === void 0 ? void 0 : options.step) !== null && _options$step !== void 0 ? _options$step : 1);\r\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number equal to or greater than 1');\r\n\r\n  while (currentDate.getTime() <= endTime) {\r\n    dates.push(toDate(currentDate));\r\n    currentDate = addMinutes(currentDate, step);\r\n  }\r\n\r\n  return dates;\r\n}"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,wBAAvB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,oBAAT,CAA8BC,QAA9B,EAAwCC,OAAxC,EAAiD;EAC9D,IAAIC,aAAJ;;EAEAJ,YAAY,CAAC,CAAD,EAAIK,SAAJ,CAAZ;EACA,IAAIC,SAAS,GAAGP,aAAa,CAACD,MAAM,CAACI,QAAQ,CAACK,KAAV,CAAP,CAA7B;EACA,IAAIC,OAAO,GAAGV,MAAM,CAACI,QAAQ,CAACO,GAAV,CAApB;EACA,IAAIC,SAAS,GAAGJ,SAAS,CAACK,OAAV,EAAhB;EACA,IAAIC,OAAO,GAAGJ,OAAO,CAACG,OAAR,EAAd;;EAEA,IAAID,SAAS,IAAIE,OAAjB,EAA0B;IACxB,MAAM,IAAIC,UAAJ,CAAe,kBAAf,CAAN;EACD;;EAED,IAAIC,KAAK,GAAG,EAAZ;EACA,IAAIC,WAAW,GAAGT,SAAlB;EACA,IAAIU,IAAI,GAAGC,MAAM,CAAC,CAACb,aAAa,GAAGD,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACa,IAA3E,MAAqF,IAArF,IAA6FZ,aAAa,KAAK,KAAK,CAApH,GAAwHA,aAAxH,GAAwI,CAAzI,CAAjB;EACA,IAAIY,IAAI,GAAG,CAAP,IAAYE,KAAK,CAACF,IAAD,CAArB,EAA6B,MAAM,IAAIH,UAAJ,CAAe,4DAAf,CAAN;;EAE7B,OAAOE,WAAW,CAACJ,OAAZ,MAAyBC,OAAhC,EAAyC;IACvCE,KAAK,CAACK,IAAN,CAAWrB,MAAM,CAACiB,WAAD,CAAjB;IACAA,WAAW,GAAGlB,UAAU,CAACkB,WAAD,EAAcC,IAAd,CAAxB;EACD;;EAED,OAAOF,KAAP;AACD"},"metadata":{},"sourceType":"module"}